services:
  app:
    build:
      context: .
      target: ${GO_ENV}
    container_name: ur-fingerprint
    environment:
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - ${PORT}:${PORT}
    depends_on:
      migrate:
        condition: service_completed_successfully
    env_file:
      - ./.env
    volumes:
      - .:/app
    networks:
      - ur-fingerprint-network
  migrate:
    image: migrate/migrate
    container_name: ur-fingerprint-migrate
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ur-fingerprint-network
    volumes:
      - ./repository/migrations:/migrations
    command: ["-path", "/migrations/", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@ur-fingerprint-db/${POSTGRES_DB}?sslmode=disable", "up"]
  postgres:
    image: postgres:17.4-alpine
    restart: always
    container_name: ur-fingerprint-db
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [CMD-SHELL, "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports: 
      - 5432:5432
    volumes:
      - pg-data:/var/lib/posgresql/data
    networks:
      - ur-fingerprint-network

volumes:
  pg-data: {}

networks:
  ur-fingerprint-network: {}
